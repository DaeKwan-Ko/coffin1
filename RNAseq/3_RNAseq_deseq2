#------------------------------------------------------------------------------------
Differential gene expression analysis using DESeq2
Input data: raw read count files generated using htseq-count
Author: Dae Kwan Ko (dkko@msu.edu)
Last Modified: 2025-01-27
Overview: This repository presents the scripts used for the differential gene expression analysis using DESeq2.
#------------------------------------------------------------------------------------

## R Markdown

```{r loadLibs}
rm(list=ls())
require(limma)
require(edgeR)
require(DESeq2)
require(RColorBrewer)
require(gplots)
require(ggplot2)
require(apeglm)
require(FactoMineR)
require(factoextra)
require(digest)
require(dplyr)
```

```{r fileprep}
rm(list=ls())
myFiles <- list.files(pattern = glob2rx("*htseq.txt"), 
                      all.files = T, 
                      full.names = F) # Create a vector containing the names of your files
myFiles
myData <- lapply(myFiles, # Use list apply to apply the native R functi on read.table() to myFiles
                 read.table, colClasses=c("character", "numeric"))
myData

# Name the elements of myData
names(myData) <-c("c_D6_1","c_D6_2","c_D6_3","c_T6_1","c_T6_2","c_T6_3",
                  "m_D6_1","m_D6_2","m_D6_3","m_T6_1","m_T6_2","m_T6_3",
                  "s_D6_1","s_D6_2","s_D6_3","s_T6_1","s_T6_2","s_T6_3")
summary(myData)
head(myData$c_D6_1)
tail(myData$c_D6_1)

rmLines <- function(x){x <- x[1:28775,]}
myData <- lapply(myData, rmLines)
nrow(myData$c_D6_1)

counts <- data.frame(row.names=myData$c_D6_1[,1],
                     c_D6_1=myData$c_D6_1[,2], c_D6_2=myData$c_D6_2[,2], c_D6_3=myData$c_D6_3[,2], 
                     c_T6_1=myData$c_T6_1[,2], c_T6_2=myData$c_T6_2[,2], c_T6_3=myData$c_T6_3[,2],
                     m_D6_1=myData$m_D6_1[,2], m_D6_2=myData$m_D6_2[,2], m_D6_3=myData$m_D6_3[,2], 
                     m_T6_1=myData$m_T6_1[,2], m_T6_2=myData$m_T6_2[,2], m_T6_3=myData$m_T6_3[,2],
                     s_D6_1=myData$s_D6_1[,2], s_D6_2=myData$s_D6_2[,2], s_D6_3=myData$s_D6_3[,2], 
                     s_T6_1=myData$s_T6_1[,2], s_T6_2=myData$s_T6_2[,2], s_T6_3=myData$s_T6_3[,2])
head(counts)
```

```{r fileprep2}
counts_c <- counts[,c("c_D6_1", "c_D6_2", "c_D6_3", "c_T6_1", "c_T6_2", "c_T6_3")]
counts_m <- counts[,c("m_D6_1", "m_D6_2", "m_D6_3", "m_T6_1", "m_T6_2", "m_T6_3")]
counts_s <- counts[,c("s_D6_1", "s_D6_2", "s_D6_3", "s_T6_1", "s_T6_2", "s_T6_3")]

geneTotals_c <- rowSums(counts_c)
geneTotals_m <- rowSums(counts_m)
geneTotals_s <- rowSums(counts_s)

# Genes with < 100 reads in all samples together were discarded;
countsNonZero_c <- counts_c[geneTotals_c > 100,]
countsNonZero_m <- counts_m[geneTotals_m > 100,]
countsNonZero_s <- counts_s[geneTotals_s > 100,]

# See how many genes are left in the analysis
nrow(countsNonZero_c)  #20370
nrow(countsNonZero_m)  #20366
nrow(countsNonZero_s)  #19954
```

```{r Start preparing your experimental design info}
treatments <- as.factor(c(rep("ctrl",3),rep("stress",3)))

design <- model.matrix(~treatments)

dge_c <- DGEList(counts = countsNonZero_c, 
               group = treatments, 
               remove.zeros = T)
dge_m <- DGEList(counts = countsNonZero_m, 
               group = treatments, 
               remove.zeros = T)
dge_s <- DGEList(counts = countsNonZero_s, 
               group = treatments, 
               remove.zeros = T) 


plotMDS(dge_c,main="MDS",pch = 19,
        col=c(rep("black",3),rep("red",3)))
plotMDS(dge_m,main="MDS",pch = 19,
        col=c(rep("black",3),rep("red",3)))
plotMDS(dge_s,main="MDS",pch = 19,
        col=c(rep("black",3),rep("red",3)))

```


```{r DEDeq.object}
# treatments was our column labels organized as factors
colData <- DataFrame(treatments)

# Take a look at the colData "data.frame" object.        
colData

# Compare to tissues object.
treatments

# Create the DESeq object from the counts matrix
dds_c <- DESeqDataSetFromMatrix(countsNonZero_c, colData=colData, design=formula(~treatments))
dds_m <- DESeqDataSetFromMatrix(countsNonZero_m, colData=colData, design=formula(~treatments))
dds_s <- DESeqDataSetFromMatrix(countsNonZero_s, colData=colData, design=formula(~treatments))

# Check the metadata on your DESeq data set object.
dds_c
dds_m
dds_s

# Estimate size factors to scale the columns of the count matrix, estimate dispersions, and fit model
dds_c <- DESeq(dds_c)
dds_m <- DESeq(dds_m)
dds_s <- DESeq(dds_s)

# To see the normalization factors:
sizeFactors(dds_c)
```

```{r shrinking}
# Look at the top level of the DESeq data set.
slotNames(dds_c)
slotNames(dds_m)
slotNames(dds_s)

dds_c@colData

# Check out the structure of the DESeq data set.
str(dds_c)

# Plot gene dispersion correlations and other trends
# Dispersion shows how much the variance for each gene deviates from the mean.
geneDispersion_c <- dds_c@rowRanges@elementMetadata@listData$dispGeneEst
geneDispersion_m <- dds_m@rowRanges@elementMetadata@listData$dispGeneEst
geneDispersion_s <- dds_s@rowRanges@elementMetadata@listData$dispGeneEst

treatments_c <- dds_c@rowRanges@elementMetadata@listData$treatments_stress_vs_ctrl
treatments_m <- dds_m@rowRanges@elementMetadata@listData$treatments_stress_vs_ctrl
treatments_s <- dds_s@rowRanges@elementMetadata@listData$treatments_stress_vs_ctrl

# See how fold change corresponds to dispersion
plot(treatments_c, geneDispersion_c, xlab="Fold change of expression (T/D)",
     ylab="Gene dispersion estimate", pch=19, cex=0.4)
plot(treatments_m, geneDispersion_m, xlab="Fold change of expression (T/D)",
     ylab="Gene dispersion estimate", pch=19, cex=0.4)
plot(treatments_s, geneDispersion_s, xlab="Fold change of expression (T/D)",
     ylab="Gene dispersion estimate", pch=19, cex=0.4)

# Check the trend of normalized counts to see how it corresponds to the dispersion estimate.
plotDispEsts(dds_c)
plotDispEsts(dds_m)
plotDispEsts(dds_s)

# obtain results
res_dds_c <- results(dds_c, name="treatments_stress_vs_ctrl")
res_dds_m <- results(dds_m, name="treatments_stress_vs_ctrl")
res_dds_s <- results(dds_s, name="treatments_stress_vs_ctrl")

resultsNames(dds_c)
resultsNames(dds_m)
resultsNames(dds_s)

res.shr_dds_c <- lfcShrink(dds_c, coef="treatments_stress_vs_ctrl", type="apeglm")
res.shr_dds_m <- lfcShrink(dds_m, coef="treatments_stress_vs_ctrl", type="apeglm")
res.shr_dds_s <- lfcShrink(dds_s, coef="treatments_stress_vs_ctrl", type="apeglm")
```


```{r MA plot}
plotMA(res.shr_dds_c, ylim=c(-5,5), alpha = 0.05, main = "Col-0 with shrinking") #with shrinking
plotMA(res_dds_c, ylim=c(-5,5), alpha = 0.05, main = "Col-0 without shrinking") #without shrinking

plotMA(res.shr_dds_m, ylim=c(-5,5), alpha = 0.05, main = "Col-0 with shrinking") #with shrinking
plotMA(res_dds_m, ylim=c(-5,5), alpha = 0.05, main = "Col-0 without shrinking") #without shrinking

plotMA(res.shr_dds_s, ylim=c(-5,5), alpha = 0.05, main = "Col-0 with shrinking") #with shrinking
plotMA(res_dds_s, ylim=c(-5,5), alpha = 0.05, main = "Col-0 without shrinking") #without shrinking
```


```{r volavano plot with labels}
library(EnhancedVolcano)

vol_c_wL <- EnhancedVolcano(res.shr_dds_c, lab = rownames(res.shr_dds_c), x = 'log2FoldChange', y = 'padj', pCutoff = 0.05, FCcutoff = 1, ylim = c(0,320), xlim = c(-6,12)) # with labels
vol_c_nL <- EnhancedVolcano(res.shr_dds_c, lab = rownames(res.shr_dds_c), x = 'log2FoldChange', y = 'padj', pCutoff = 0.05, FCcutoff = 1, ylim = c(0,320), xlim = c(-6,12), labSize = 0) # without labels
vol_m_wL <- EnhancedVolcano(res.shr_dds_m, lab = rownames(res.shr_dds_m), x = 'log2FoldChange', y = 'padj', pCutoff = 0.05, FCcutoff = 1, ylim = c(0,320), xlim = c(-6,12)) # with labels
vol_m_nL <- EnhancedVolcano(res.shr_dds_m, lab = rownames(res.shr_dds_m), x = 'log2FoldChange', y = 'padj', pCutoff = 0.05, FCcutoff = 1, ylim = c(0,320), xlim = c(-6,12), labSize = 0) # without labels
vol_s_wL <- EnhancedVolcano(res.shr_dds_s, lab = rownames(res.shr_dds_s), x = 'log2FoldChange', y = 'padj', pCutoff = 0.05, FCcutoff = 1, ylim = c(0,320), xlim = c(-6,12)) # with labels
vol_s_nL <- EnhancedVolcano(res.shr_dds_s, lab = rownames(res.shr_dds_s), x = 'log2FoldChange', y = 'padj', pCutoff = 0.05, FCcutoff = 1, ylim = c(0,320), xlim = c(-6,12), labSize = 0) # without labels

vol_c_wL
vol_c_nL
vol_m_wL
vol_m_nL
vol_s_wL
vol_s_nL

pdf(file = "Volacano plot_Col-0 with labels.pdf", width = 7, height = 7) # defaults to 7 x 7 inches
vol_c_wL
dev.off()

pdf(file = "Volacano plot_Col-0 without labels.pdf", width = 7, height = 7) # defaults to 7 x 7 inches
vol_c_nL
dev.off()

pdf(file = "Volacano plot_bzip2860 with labels.pdf", width = 7, height = 7) # defaults to 7 x 7 inches
vol_m_wL
dev.off()

pdf(file = "Volacano plot_bzip2860 without labels.pdf", width = 7, height = 7) # defaults to 7 x 7 inches
vol_m_nL
dev.off()

pdf(file = "Volacano plot_coffin1 with labels.pdf", width = 7, height = 7) # defaults to 7 x 7 inches
vol_s_wL
dev.off()

pdf(file = "Volacano plot_coffin1 without labels.pdf", width = 7, height = 7) # defaults to 7 x 7 inches
vol_s_nL
dev.off()
```

```{r export results}
res.shr_dds_c <- res.shr_dds_c[!(is.na(res.shr_dds_c$padj)),]
res.shr_dds_m <- res.shr_dds_m[!(is.na(res.shr_dds_m$padj)),]
res.shr_dds_s <- res.shr_dds_s[!(is.na(res.shr_dds_s$padj)),]

deseq2_gene_list_c <- as.data.frame(res.shr_dds_c[res.shr_dds_c$padj < 0.05,])
deseq2_gene_list_m <- as.data.frame(res.shr_dds_m[res.shr_dds_m$padj < 0.05,])
deseq2_gene_list_s <- as.data.frame(res.shr_dds_s[res.shr_dds_s$padj < 0.05,])

write.table(deseq2_gene_list_c, "deseq2_gene_list_0.05_padj_Col-0.txt", sep="\t")
write.table(deseq2_gene_list_m, "deseq2_gene_list_0.05_padj_bzip2860.txt", sep="\t")
write.table(deseq2_gene_list_s, "deseq2_gene_list_0.05_padj_coffin1.txt", sep="\t")
```
